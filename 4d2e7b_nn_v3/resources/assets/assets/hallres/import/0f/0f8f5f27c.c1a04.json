[1,["b1SR9TqaZN1KH7gj4HjbQt"],["_effectAsset"],[["cc.Material",["_name","_techIdx","_props","_states","_defines"],-2],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,3,4,6],[1,0,1,2,4]],[[[[0,"banner",1,[{"xRadius":0.03,"yRadius":0.06}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"ENABLE_ROUNDCORNER":true}]]],0,0,[0],[0],[0]],[[[1,"../bundles/hallres/custom_effects/sprite_corner/sprite_corner",[{"hash":429015114,"name":"../bundles/hallres/custom_effects/sprite_corner/sprite_corner|corner-vs:vert|fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"uvOffset","stageFlags":16,"binding":1,"members":[{"name":"u_uvOffset","type":16,"count":1}],"defines":[]},{"name":"uvRotated","stageFlags":16,"binding":2,"members":[{"name":"u_uvRotated","type":13,"count":1}],"defines":[]},{"name":"RoundCorner","stageFlags":16,"binding":3,"members":[{"name":"xRadius","type":13,"count":1},{"name":"yRadius","type":13,"count":1}],"defines":["ENABLE_ROUNDCORNER"]}],"samplerTextures":[{"name":"_WaveTex","type":28,"count":1,"stageFlags":16,"binding":4,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"uvOffset","stageFlags":16,"binding":1,"members":[{"name":"u_uvOffset","type":16,"count":1}],"defines":[]},{"name":"uvRotated","stageFlags":16,"binding":2,"members":[{"name":"u_uvRotated","type":13,"count":1}],"defines":[]},{"name":"RoundCorner","stageFlags":16,"binding":3,"members":[{"name":"xRadius","type":13,"count":1},{"name":"yRadius","type":13,"count":1}],"defines":["ENABLE_ROUNDCORNER"]}],"samplerTextures":[{"name":"_WaveTex","type":28,"count":1,"stageFlags":16,"binding":4,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #if USE_LOCAL\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n      highp vec4 cc_reflectionProbeData1;\n      highp vec4 cc_reflectionProbeData2;\n      highp vec4 cc_reflectionProbeBlendData1;\n      highp vec4 cc_reflectionProbeBlendData2;\n    };\n  #endif\n  #if SAMPLE_FROM_RT\n    #define QUATER_PI         0.78539816340\n    #define HALF_PI           1.57079632679\n    #define PI                3.14159265359\n    #define PI2               6.28318530718\n    #define PI4               12.5663706144\n    #define INV_QUATER_PI     1.27323954474\n    #define INV_HALF_PI       0.63661977237\n    #define INV_PI            0.31830988618\n    #define INV_PI2           0.15915494309\n    #define INV_PI4           0.07957747155\n    #define EPSILON           1e-6\n    #define EPSILON_LOWP      1e-4\n    #define LOG2              1.442695\n    #define EXP_VALUE         2.71828183\n    #define FP_MAX            65504.0\n    #define FP_SCALE          0.0009765625\n    #define FP_SCALE_INV      1024.0\n    #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n            #define LIGHT_MAP_TYPE_DISABLED 0\n    #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n    #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n    #define REFLECTION_PROBE_TYPE_NONE 0\n    #define REFLECTION_PROBE_TYPE_CUBE 1\n    #define REFLECTION_PROBE_TYPE_PLANAR 2\n    #define REFLECTION_PROBE_TYPE_BLEND 3\n    #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n            #define LIGHT_TYPE_DIRECTIONAL 0.0\n    #define LIGHT_TYPE_SPHERE 1.0\n    #define LIGHT_TYPE_SPOT 2.0\n    #define LIGHT_TYPE_POINT 3.0\n    #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n    #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n    #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n    #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n    #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n    #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n    #define TONE_MAPPING_ACES 0\n    #define TONE_MAPPING_LINEAR 1\n    #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n    #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n      #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n    #endif\n    #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n    #endif\n  #endif\n  in vec3 a_position;\n  in vec2 a_texCoord;\n  in vec4 a_color;\n  out vec4 i_color;\n  out vec2 uv0;\n  out vec2 uv1;\n  out vec3 v_position;\n  vec4 vert () {\n    vec4 pos = vec4(a_position, 1);\n    #if USE_LOCAL\n      pos = cc_matWorld * pos;\n    #endif\n    #if USE_PIXEL_ALIGNMENT\n      pos = cc_matView * pos;\n      pos.xyz = floor(pos.xyz);\n      pos = cc_matProj * pos;\n    #else\n      pos = cc_matViewProj * pos;\n    #endif\n    uv0 = a_texCoord;\n    #if SAMPLE_FROM_RT\n      uv1 = uv0;\n      uv1 = cc_cameraPos.w > 1.0 ? vec2(uv1.x, 1.0 - uv1.y) : uv1;\n    #endif\n    i_color = a_color;\n    return pos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nin vec4 i_color;\nin vec2 uv0;\nuniform sampler2D _WaveTex;\nlayout(std140) uniform uvOffset {\n  vec4 u_uvOffset;\n};\nlayout(std140) uniform uvRotated {\n  float u_uvRotated;\n};\n#if ENABLE_ROUNDCORNER\n  layout(std140) uniform RoundCorner {\n    float xRadius;\n    float yRadius;\n  };\n#endif\nvec4 frag() {\n  vec4 o = i_color;\n  #if USE_TEXTURE\n    o = texture(cc_spriteTexture, uv0);\n  #endif\n  o *= i_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDCORNER\n    float ellipseXRadius = clamp(xRadius, 0.0, 0.5);\n    float ellipseYRadius = clamp(yRadius, 0.0, 0.5);\n    vec2 uvNormalize;\n    uvNormalize.x = (uv0.x - u_uvOffset.x) / (u_uvOffset.z - u_uvOffset.x);\n    uvNormalize.y = (uv0.y - u_uvOffset.y) / (u_uvOffset.w - u_uvOffset.y);\n    if (u_uvRotated > 0.5)\n    {\n      float temp = uvNormalize.x;\n      uvNormalize.x = uvNormalize.y;\n      uvNormalize.y = 1.0 - temp;\n    }\n    vec2 uv = uvNormalize.xy - vec2(0.5, 0.5);\n    float rx = abs(uv.x) - (0.5 - ellipseXRadius);\n    float ry = abs(uv.y) - (0.5 - ellipseYRadius);\n    float mx = step(0.5 - ellipseXRadius, abs(uv.x));\n    float my = step(0.5 - ellipseYRadius, abs(uv.y));\n    float isOutOfEllipse = step(1.0, pow(rx, 2.0) / pow(xRadius, 2.0) + pow(ry, 2.0) / pow(yRadius, 2.0));\n    float angleInRadian = atan(ry / rx);\n    vec2 pointInEllipse = vec2(xRadius * cos(angleInRadian), yRadius * sin(angleInRadian));\n    vec2 pointInBigEllipse = vec2((xRadius * 1.01) * cos(angleInRadian), (yRadius * 1.01) * sin(angleInRadian));\n    float maxDis = distance(pointInBigEllipse, pointInEllipse);\n    float curDis = distance(vec2(rx, ry), pointInEllipse);\n    float smo = smoothstep(0.0, maxDis, curDis);\n    float alpha = 1.0 - mx * my * isOutOfEllipse * smo;\n    o = vec4(o.rgb, o.a * alpha);\n  #endif\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"  precision highp float;\n  uniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n  #if USE_LOCAL\n    uniform highp mat4 cc_matWorld;\n  #endif\n  #if SAMPLE_FROM_RT\n    #define QUATER_PI         0.78539816340\n    #define HALF_PI           1.57079632679\n    #define PI                3.14159265359\n    #define PI2               6.28318530718\n    #define PI4               12.5663706144\n    #define INV_QUATER_PI     1.27323954474\n    #define INV_HALF_PI       0.63661977237\n    #define INV_PI            0.31830988618\n    #define INV_PI2           0.15915494309\n    #define INV_PI4           0.07957747155\n    #define EPSILON           1e-6\n    #define EPSILON_LOWP      1e-4\n    #define LOG2              1.442695\n    #define EXP_VALUE         2.71828183\n    #define FP_MAX            65504.0\n    #define FP_SCALE          0.0009765625\n    #define FP_SCALE_INV      1024.0\n    #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n            #define LIGHT_MAP_TYPE_DISABLED 0\n    #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n    #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n    #define REFLECTION_PROBE_TYPE_NONE 0\n    #define REFLECTION_PROBE_TYPE_CUBE 1\n    #define REFLECTION_PROBE_TYPE_PLANAR 2\n    #define REFLECTION_PROBE_TYPE_BLEND 3\n    #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n            #define LIGHT_TYPE_DIRECTIONAL 0.0\n    #define LIGHT_TYPE_SPHERE 1.0\n    #define LIGHT_TYPE_SPOT 2.0\n    #define LIGHT_TYPE_POINT 3.0\n    #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n    #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n    #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n    #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n    #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n    #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n    #define TONE_MAPPING_ACES 0\n    #define TONE_MAPPING_LINEAR 1\n    #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n    #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n      #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n    #endif\n    #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n    #endif\n  #endif\n  attribute vec3 a_position;\n  attribute vec2 a_texCoord;\n  attribute vec4 a_color;\n  varying vec4 i_color;\n  varying vec2 uv0;\n  varying vec2 uv1;\n  varying vec3 v_position;\n  vec4 vert () {\n    vec4 pos = vec4(a_position, 1);\n    #if USE_LOCAL\n      pos = cc_matWorld * pos;\n    #endif\n    #if USE_PIXEL_ALIGNMENT\n      pos = cc_matView * pos;\n      pos.xyz = floor(pos.xyz);\n      pos = cc_matProj * pos;\n    #else\n      pos = cc_matViewProj * pos;\n    #endif\n    uv0 = a_texCoord;\n    #if SAMPLE_FROM_RT\n      uv1 = uv0;\n      uv1 = cc_cameraPos.w > 1.0 ? vec2(uv1.x, 1.0 - uv1.y) : uv1;\n    #endif\n    i_color = a_color;\n    return pos;\n  }\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvarying vec4 i_color;\nvarying vec2 uv0;\nuniform sampler2D _WaveTex;\n  uniform vec4 u_uvOffset;\n   uniform float u_uvRotated;\n#if ENABLE_ROUNDCORNER\n      uniform float xRadius;\n    uniform float yRadius;\n#endif\nvec4 frag() {\n  vec4 o = i_color;\n  #if USE_TEXTURE\n    o = texture2D(cc_spriteTexture, uv0);\n  #endif\n  o *= i_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDCORNER\n    float ellipseXRadius = clamp(xRadius, 0.0, 0.5);\n    float ellipseYRadius = clamp(yRadius, 0.0, 0.5);\n    vec2 uvNormalize;\n    uvNormalize.x = (uv0.x - u_uvOffset.x) / (u_uvOffset.z - u_uvOffset.x);\n    uvNormalize.y = (uv0.y - u_uvOffset.y) / (u_uvOffset.w - u_uvOffset.y);\n    if (u_uvRotated > 0.5)\n    {\n      float temp = uvNormalize.x;\n      uvNormalize.x = uvNormalize.y;\n      uvNormalize.y = 1.0 - temp;\n    }\n    vec2 uv = uvNormalize.xy - vec2(0.5, 0.5);\n    float rx = abs(uv.x) - (0.5 - ellipseXRadius);\n    float ry = abs(uv.y) - (0.5 - ellipseYRadius);\n    float mx = step(0.5 - ellipseXRadius, abs(uv.x));\n    float my = step(0.5 - ellipseYRadius, abs(uv.y));\n    float isOutOfEllipse = step(1.0, pow(rx, 2.0) / pow(xRadius, 2.0) + pow(ry, 2.0) / pow(yRadius, 2.0));\n    float angleInRadian = atan(ry / rx);\n    vec2 pointInEllipse = vec2(xRadius * cos(angleInRadian), yRadius * sin(angleInRadian));\n    vec2 pointInBigEllipse = vec2((xRadius * 1.01) * cos(angleInRadian), (yRadius * 1.01) * sin(angleInRadian));\n    float maxDis = distance(pointInBigEllipse, pointInEllipse);\n    float curDis = distance(vec2(rx, ry), pointInEllipse);\n    float smo = smoothstep(0.0, maxDis, curDis);\n    float alpha = 1.0 - mx * my * isOutOfEllipse * smo;\n    o = vec4(o.rgb, o.a * alpha);\n  #endif\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":47}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"ENABLE_ROUNDCORNER","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../bundles/hallres/custom_effects/sprite_corner/sprite_corner|corner-vs:vert|fs:frag","depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_uvRotated":{"type":13,"value":[0]},"u_uvOffset":{"type":16,"value":[0,0,1,1]},"xRadius":{"type":13,"value":[0.4]},"yRadius":{"type":13,"value":[0.4]},"_WaveTex":{"value":"white","type":28}}}]},{"name":"transparent","passes":[{"program":"../bundles/hallres/custom_effects/sprite_corner/sprite_corner|corner-vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_uvRotated":{"type":13,"value":[0]},"u_uvOffset":{"type":16,"value":[0,0,1,1]},"xRadius":{"type":13,"value":[0.4]},"yRadius":{"type":13,"value":[0.4]},"_WaveTex":{"value":"white","type":28}}}]}]]],0,0,[],[],[]]]]
